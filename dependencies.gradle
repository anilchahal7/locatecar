ext {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileSDKVersion = 28
    buildToolsVersion = "28.0.3"
    minSDKVersion = 21
    targetSDKVersion = 28

    multiDexEnabled = true

    kotlin_version = '1.3.41'

    rxKotlinVersion = '2.2.0'
    rxAndroid = '2.1.1'
    rxJavaVersion = '2.2.11'

    androidAnnotationsVersion = '1.0.0'
    javaxAnnotationVersion = '1.3.2'

    okHttpVersion = '3.12.1'
    retrofitVersion = '2.5.0'
    retrofitRxJavaAdapterVersion = '1.0.0'

    archRuntimeVersion = '2.0.0'
    archComponents = '1.1.1'
    constraintLayoutVersion = '1.1.3'
    supportDesignVersion = '1.0.0'

    daggerVersion = "2.18"
    javaxInjectVersion = '1'

    googleMapsVersion = '17.0.0'

    droidNetVersion = '2.0.0'

    assertJVersion = '3.10.0'
    jUnitVersion = '4.12'
    mockitoVersion = '2.23.4'
    mockitoKotlinVersion = '1.6.0'
    androidTestRunner = '1.1.0-alpha3'
    androidTestRules = '1.1.0'
    androidxCoreTesting = '2.0.0'
    robolectricVersion = "4.0"


    remoteDependencies = [
            // Kotlin Library ...
            kotlin         : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}",

            // Annotation Libraries ...
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject    : "javax.inject:javax.inject:${javaxInjectVersion}",

            // Retrofit and its Libraries ...
            okHttp         : "com.squareup.okhttp3:okhttp:${okHttpVersion}",
            retrofit       : "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            retrofitMock   : "com.squareup.retrofit2:retrofit-mock:${retrofitVersion}",
            gson           : "com.squareup.retrofit2:converter-gson:${retrofitVersion}",
            rxJavaAdapter  : "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}",
            jwRxJavaAdapter: "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${retrofitRxJavaAdapterVersion}",
            okHttpLogging  : "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}",

            // Testing Libraries ...
            jUnit          : "junit:junit:${jUnitVersion}",
            assertJ        : "org.assertj:assertj-core:${assertJVersion}",
            mockitoCore    : "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline  : "org.mockito:mockito-inline:${mockitoVersion}"
    ]
    dataDependencies = [
            // Kotlin Library ...
            kotlin         : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}",

            // Annotation Libraries ...
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject    : "javax.inject:javax.inject:${javaxInjectVersion}",

            // Reactive Programming Library ...
            rxJava         : "io.reactivex.rxjava2:rxjava:${rxJavaVersion}",

            // Testing Libraries ...
            jUnit          : "junit:junit:${jUnitVersion}",
            assertJ        : "org.assertj:assertj-core:${assertJVersion}",
            mockitoCore    : "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline  : "org.mockito:mockito-inline:${mockitoVersion}"
    ]
    domainDependencies = [
            // Kotlin Library ...
            kotlin         : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}",

            // Annotation Libraries ...
            javaxAnnotation: "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject    : "javax.inject:javax.inject:${javaxInjectVersion}",

            // Reactive Programming Library ...
            rxJava         : "io.reactivex.rxjava2:rxjava:${rxJavaVersion}",

            // Testing libraries
            jUnit          : "junit:junit:${jUnitVersion}",
            assertJ        : "org.assertj:assertj-core:${assertJVersion}",
            mockitoCore    : "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline  : "org.mockito:mockito-inline:${mockitoVersion}"
    ]
    presentationDependencies = [
            // Kotlin Library ...
            kotlin            : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}",

            // Reactive Programming Libraries ...
            rxAndroid         : "io.reactivex.rxjava2:rxandroid:${rxAndroid}",
            rxKotlin          : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",

            // Libraries for Annotations ...
            javaxAnnotation   : "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            javaxInject       : "javax.inject:javax.inject:${javaxInjectVersion}",
            androidAnnotations: "androidx.annotation:annotation:${androidAnnotationsVersion}",

            // Android Lifecycle Libraries ...
            archRuntime       : "androidx.lifecycle:lifecycle-runtime:${archRuntimeVersion}",
            archExtensions    : "androidx.lifecycle:lifecycle-extensions:${archRuntimeVersion}",
            archCompiler      : "androidx.lifecycle:lifecycle-compiler:${archRuntimeVersion}",

            // Libraries for Dependency Injection ...
            daggerCompiler    : "com.google.dagger:dagger-compiler:$daggerVersion",
            dagger            : "com.google.dagger:dagger:$daggerVersion",

            // Testing Libraries ...
            jUnit             : "junit:junit:${jUnitVersion}",
            assertJ           : "org.assertj:assertj-core:${assertJVersion}",
            mockitoKotlin     : "com.nhaarman:mockito-kotlin-kt1.1:${mockitoKotlinVersion}",
            mockitoCore       : "org.mockito:mockito-core:${mockitoVersion}",
            mockitoInline     : "org.mockito:mockito-inline:${mockitoVersion}",

            kotlinUnit      : "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}",
            androidRunner   : "androidx.test:runner:${androidTestRunner}",
            androidTestRules: "androidx.test:rules:${androidTestRunner}",
            archTesting     : "androidx.arch.core:core-testing:${androidxCoreTesting}",
            robolectric     : "org.robolectric:robolectric:${robolectricVersion}"
    ]
    appDependencies = [
            // Kotlin Library ...
            kotlin            : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}",

            // Reactive Programming Libraries ...
            rxKotlin          : "io.reactivex.rxjava2:rxkotlin:${rxKotlinVersion}",
            rxAndroid         : "io.reactivex.rxjava2:rxandroid:${rxAndroid}",

            // Android Lifecycle Libraries ...
            archRuntime       : "androidx.lifecycle:lifecycle-runtime:${archRuntimeVersion}",
            archExtensions    : "androidx.lifecycle:lifecycle-extensions:${archRuntimeVersion}",
            archCompiler      : "androidx.lifecycle:lifecycle-compiler:${archRuntimeVersion}",

            // Libraries for Annotations and UI Material Design ...
            javaxAnnotation   : "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}",
            androidAnnotations: "androidx.annotation:annotation:${androidAnnotationsVersion}",
            supportAppCompat  : "androidx.appcompat:appcompat:${supportDesignVersion}",
            supportV4         : "androidx.legacy:legacy-support-v4:${supportDesignVersion}",
            design            : "com.google.android.material:material:${supportDesignVersion}",
            constraintLayout  : "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}",

            // Libraries for Dependency Injection ...
            javaxInject       : "javax.inject:javax.inject:${javaxInjectVersion}",
            daggerCompiler    : "com.google.dagger:dagger-compiler:${daggerVersion}",
            dagger            : "com.google.dagger:dagger-android:${daggerVersion}",
            daggerSupport     : "com.google.dagger:dagger-android-support:${daggerVersion}",
            daggerProcessor   : "com.google.dagger:dagger-android-processor:${daggerVersion}",

            // Libraries for Using Google Map Services ...
            googleLocation    : "com.google.android.gms:play-services-location:${googleMapsVersion}",
            googleMaps        : "com.google.android.gms:play-services-maps:${googleMapsVersion}",
            googlePlaces      : "com.google.android.gms:play-services-places:${googleMapsVersion}",

            // Library for Checking Internet Connection ...
            droidNet          : "com.job:droidnet:${droidNetVersion}"
    ]
}